<?xml version="1.0" encoding="UTF-8"?>
<queries>
<aQuery>
<all-regions/>
<marketQuery title="Prices for all markets">
         <axis1 name="market">market</axis1>
         <axis2 name="Year">market</axis2>
         <xPath buildList="true" dataName="price" group="false" sumAll="false">Marketplace/market[true()]/price/node()</xPath>
         <comments/>
      </marketQuery>
	  	  </aQuery>
	<aQuery>
	<all-regions/>
	<costCurveQuery title="Discounted policy cost">
         <axis1 name="DiscountedCost">DiscountedCost</axis1>
         <axis2 name="Region">DiscountedCost</axis2>
         <xPath buildList="true" dataName="Discounted Cost" group="false" sumAll="false">/text()</xPath>
         <comments/>
      </costCurveQuery>
	  </aQuery>
	<aQuery>
	<all-regions/>
	<costCurveQuery title="Regional CO2 MAC curves by period">
         <axis1 name="Region">Curve</axis1>
         <axis2 name="Tax">DataPoint</axis2>
         <chartLabelColumn>CostCurves</chartLabelColumn>
         <xPath buildList="true" dataName="Cost" group="false" sumAll="false">PointSet/DataPoint/x/text()</xPath>
         <comments/>
      </costCurveQuery>
	  </aQuery>
	<aQuery>
	<all-regions/>
	  <supplyDemandQuery title="Energy consumption by sector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']//*[@type='input']/demand-physical[@unit='EJ']/node()</xPath>
         <comments>Supply sectors only.</comments>
      </supplyDemandQuery>
	  </aQuery>
	<aQuery>
<all-regions/>
<ClimateQuery title="Climate forcing">
         <axis1 name="forcing-total">none</axis1>
         <axis2 name="Year">forcing-total[@year]</axis2>
         <xPath buildList="true" dataName="forcing-total" group="false" sumAll="false">climate-model/forcing-total/text()</xPath>
         <comments/>
      </ClimateQuery>
	  </aQuery>
	<aQuery>
	<all-regions/>
	 <emissionsQueryBuilder title="GHG emissions by region">
         <axis1 name="GHG">GHG</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector' (:collapse:) or @type = 'resource' (: collapse :)]//*[@type = 'GHG']/emissions/node()</xPath>
         <comments/>
      </emissionsQueryBuilder>
 </aQuery>
  <aQuery>
       <region name="USA" />
	   <ClimateQuery title="Global mean temperature">
         <axis1 name="temperature">none</axis1>
         <axis2 name="Year">global-mean-temperature[@year]</axis2>
         <xPath buildList="true" dataName="global-mean-temperature" group="false" sumAll="false">climate-model/global-mean-temperature/text()</xPath>
         <comments/>
      </ClimateQuery>
	  </aQuery>
     <aQuery>
		<all-regions/>
		<supplyDemandQuery title="Primary Energy Consumption (Direct Equivalent)">
         <axis1 name="fuel">input[@name]</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false"> 
			 	 	 declare function local:append-heirarchy($parent as node(), $append as node()) as node() {
			 	 		 let $scn := $parent/ancestor::scenario,
			 			   	  $rgn := $parent/ancestor::region
			 			   return
			 			   	  document { element scenario {
			 			 	  					$scn/@*,
			 			 						element region {
			 			 							$rgn/@*,
			 			 							$append
			 			 						}
			 			 	  				}
			 				}
			 	 	 };  
			 	 	 declare function local:get-primary-renewable($outputs as node()*) as node()* {
			 	 	 unordered { 	
			 	 	 for $output in $outputs 
			 	 	 let $new_output :=  
			 	 	 element input {
			 	 		 attribute type {'input'},
			 	 		 attribute name {$output/parent::*/following-sibling::keyword/@primary-renewable},
			 	 		 element demand-physical {
			 	 			 attribute vintage {$output/@vintage},
			 	 			 attribute unit {$output/@unit},
			 	 			 text { $output }
			 	 		 }
			 	 	 },
			 	 	 $new_root := local:append-heirarchy($output/parent::*/parent::*, $new_output)
			 	 	 return $new_root//text()
			 	 	 } 
			 	 	 };
			 	 	 declare function local:run-primary-energy($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 	 		  then $regions
			 	 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 	 return
			 	 	 for $scenario in $scenarios, 	    
			 	 	 $region in $regionsG 	
			 	 	 let $scenario_split := tokenize($scenario, ' '), 	    
                     $scenario_name := string-join($scenario_split[position() &lt; last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
			 	 	 return (: get renewables from electricity :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='electricity' or @name='elect_td_bld']//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output)
					 		 	| (: get renewables from H2ProdCS :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 central production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output)
					 	 	 	| (: get renewables from H2ProdDist :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 forecourt production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output)
					 	 	 	| (: get the primaries :)
	 	 						$currTree//keyword[fn:exists(@primary-consumption)]/preceding-sibling::input-energy/demand-physical/text()
                                | (: get traditional biomass :)
							    $currTree//*[@type='input' and @name='traditional biomass']/demand-physical/node()
			 	 	 	
	 	 }; 
            	 local:run-primary-energy((:scenarios:), (:regions:), (:collection:))
            </xPath>
         <comments/>
         <labelRewriteList append-values="false">
            <level name="input">
               <rewrite from="geothermal-elect" to="i geothermal"/>
               <rewrite from="traditional biomass" to="j traditional biomass"/>
               <rewrite from="nuclear-H2" to="e nuclear"/>
               <rewrite from="biomass" to="d biomass"/>
               <rewrite from="natural gas" to="b natural gas"/>
               <rewrite from="exotic-elect" to="j breakthrough"/>
               <rewrite from="wind-elect" to="g wind"/>
               <rewrite from="elect_td_ind" to=""/>
               <rewrite from="solar-elect" to="h solar"/>
               <rewrite from="k new" to="k new"/>
               <rewrite from="solar-H2" to="h solar"/>
               <rewrite from="regional natural gas" to=""/>
               <rewrite from="coal" to="c coal"/>
               <rewrite from="crude oil" to="a oil"/>
               <rewrite from="hydro-elect" to="f hydro"/>
               <rewrite from="nuclear-elect" to="e nuclear"/>
               <rewrite from="wind-H2" to="g wind"/>
               <rewrite from="traded unconventional oil" to="a oil"/>
            </level>
         </labelRewriteList>
      </supplyDemandQuery>
	   </aQuery>
	   <aQuery>
	  <all-regions/>
		<supplyDemandQuery title="Regional primary energy costs">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type = 'sector' and ((@name='regional oil' or @name='regional natural gas' or @name='regional coal' or @name='regional biomass' or @name='nuclearFuelGenIII'))]/cost/text()</xPath>
         <comments/>
      </supplyDemandQuery>
	  </aQuery>
	  <aQuery>
	  <all-regions/>
	  <supplyDemandQuery title="Electricity generation by region (central only)">
         <axis1 name="region">region</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and ((@name='electricity') )]//*[@type='output']/physical-output/node()</xPath>
         <comments/>
      </supplyDemandQuery>
	  </aQuery>
	  <aQuery>
	  <region name="USA" />
	  <ClimateQuery title="CO2 concentrations">
         <axis1 name="CO2-concentration">none</axis1>
         <axis2 name="Year">CO2-concentration[@year]</axis2>
         <xPath buildList="true" dataName="CO2-concentration" group="false" sumAll="false">climate-model/CO2-concentration/text()</xPath>
         <comments/>
      </ClimateQuery>
	  </aQuery>
	  <aQuery>
	  <region name="USA" />
      <ClimateQuery title="Kyoto gas forcing">
         <axis1 name="forcing-Kyoto">none</axis1>
         <axis2 name="Year">forcing-Kyoto[@year]</axis2>
         <xPath buildList="true" dataName="forcing-Kyoto" group="false" sumAll="false">climate-model/forcing-Kyoto/text()</xPath>
         <comments/>
         </ClimateQuery>
		 </aQuery>
	  
	  </queries>